package com.item.mock;

import com.item.category.domain.Category;
import com.item.category.service.port.CategoryRepository;
import com.item.common.exception.CategoryNotFoundException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class TestCategoryRepository implements CategoryRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Category> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Category findByNameIgnoreCase(String name) {
        return null;
    }

    @Override
    public Category findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny().orElseThrow(CategoryNotFoundException::new);

    }
    public Category save(Category category) {
        if (category.getId() == null || category.getId() == 0) {
            Category newCategory = Category.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(category.getName())
                    .build();
            data.add(newCategory);
            return newCategory;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), category.getId()));
            data.add(category);
            return category;
        }
    }
}
