package com.item.mock;

import com.item.common.exception.ProductNotFoundException;
import com.item.product.domain.Product;
import com.item.product.service.port.ProductRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class TestProductRepository implements ProductRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Product> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Product save(Product product) {
        if (product.getId() == null || product.getId() == 0) {
            Product newProduct = Product.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(product.getName())
                    .categoryId(product.getCategoryId())
                    .brandId(product.getBrandId())
                    .price(product.getPrice())
                    .viewRank(product.getViewRank())
                    .build();
            data.add(newProduct);
            return newProduct;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), product.getId()));
            data.add(product);
            return product;
        }
    }

    @Override
    public Product findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny().orElseThrow(ProductNotFoundException::new);

    }

    @Override
    public Product findByNameIgnoreCase(String name) {
        return null;
    }

    @Override
    public void deleteById(Long id) {
        data.removeIf(item -> Objects.equals(item.getId(), id));
    }
}