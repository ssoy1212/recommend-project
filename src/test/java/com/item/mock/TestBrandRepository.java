package com.item.mock;

import com.item.brand.domain.Brand;
import com.item.brand.service.port.BrandRepository;
import com.item.common.exception.BrandNotFoundException;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class TestBrandRepository implements BrandRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Brand> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Brand findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny().orElseThrow(BrandNotFoundException::new);
    }

    @Override
    public Brand save(Brand brand) {
        if (brand.getId() == null || brand.getId() == 0) {
            Brand newBrand = Brand.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(brand.getName())
                    .viewRank(brand.getViewRank())
                    .build();
            data.add(newBrand);
            return newBrand;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), brand.getId()));
            data.add(brand);
            return brand;
        }
    }

    @Override
    public List<Brand> findByNameLike(String name) {
        return data.stream().filter(e -> e.getName().contains(name))
                .collect(Collectors.toList());
    }

    @Override
    public Brand findByNameIgnoreCase(String name) {
        return data.stream().filter(e -> e.getName().contains(name)).findAny().orElse(null);
    }

    @Override
    public void deleteById(Brand deleteBrand) {
        data.removeIf(item -> Objects.equals(item.getId(), deleteBrand.getId()));
    }
}
